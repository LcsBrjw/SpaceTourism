Feuille de route API Laravel + Tests (backend only)
‚úÖ 1. Initialisation & Pr√©paration
 Cr√©er projet Laravel

 Configurer .env (base SQLite conseill√©e pour tests)

 Cr√©er les migrations :

destinations, crew, technology

 Cr√©er les mod√®les

 Lancer les migrations

‚úÖ 2. Ajout des donn√©es
 Cr√©er data.json

 Cr√©er les seeders : DestinationSeeder, CrewSeeder, TechnologySeeder

 Lancer les seeders (php artisan db:seed --class=...)

 V√©rifier en DB

‚úÖ 3. Cr√©ation de l‚ÄôAPI
 D√©finir les routes dans routes/api.php

 G√©n√©rer les contr√¥leurs avec --api

 Impl√©menter les m√©thodes :

index, show, store, update, destroy

‚úÖ 4. Tester avec Postman
 Cr√©er une collection pour tous tes endpoints

 Tester chaque m√©thode : GET / POST / PUT / DELETE

‚úÖ 5. Validation des donn√©es
 Ajouter validation dans les m√©thodes store() et update()

 Retourner les erreurs proprement (422)

‚úÖ 6. üî¨ Tests Unitaires & Fonctionnels
‚û°Ô∏è √Ä ajouter une fois que chaque contr√¥leur a au moins 2 m√©thodes fonctionnelles

üìÅ Les tests se placent dans : tests/Feature/

Pour chaque entit√© (Destination, Crew, Technology) :

üìå Exemple : tests/Feature/DestinationTest.php
bash
Copier
Modifier
php artisan make:test DestinationTest
Et √† l‚Äôint√©rieur :

php
Copier
Modifier
public function test_it_lists_destinations()
{
    $response = $this->getJson('/api/destinations');

    $response->assertStatus(200);
    $response->assertJsonStructure([
        '*' => ['id', 'name', 'imageUrl', 'description', 'avgDist', 'timeTravel']
    ]);
}

public function test_it_creates_a_destination()
{
    $data = [
        'name' => 'Pluton',
        'imageUrl' => '/destination/image-pluton.png',
        'description' => 'Frozen world.',
        'avgDist' => '5.9 bil. km',
        'timeTravel' => '20 years'
    ];

    $response = $this->postJson('/api/destinations', $data);

    $response->assertStatus(201);
    $this->assertDatabaseHas('destinations', ['name' => 'Pluton']);
}
üõ†Ô∏è √Ä faire :

 1 fichier de test par entit√©

 Ajouter tests :

 GET all

 GET one

 POST (valide/invalide)

 PUT

 DELETE

‚úÖ 7. CORS + API Resource (optionnel mais clean)
 Modifier config/cors.php si besoin

 Cr√©er des Resource pour structurer le JSON (php artisan make:resource)

‚úÖ 8. Nettoyage et doc
 Supprimer les donn√©es de test

 Documenter les endpoints dans Postman ou README

 Ajouter un script pour reseeder (php artisan migrate:fresh --seed)